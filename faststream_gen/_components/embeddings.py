# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/Embeddings_CLI.ipynb.

# %% auto 0
__all__ = ['app', 'generate']

# %% ../../nbs/Embeddings_CLI.ipynb 1
from typing import *
import shutil
import zipfile
from tempfile import TemporaryDirectory
import requests
from contextlib import contextmanager
from pathlib import Path

from langchain.document_loaders import UnstructuredMarkdownLoader, DirectoryLoader
from langchain.schema.document import Document
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.embeddings import OpenAIEmbeddings
from yaspin import yaspin
import typer


from .._code_generator.constants import FASTSTREAM_REPO_ZIP_URL, FASTSTREAM_DOCS_DIR_SUFFIX, FASTSTREAM_EXAMPLES_DIR_SUFFIX
from .package_data import get_root_data_path

# %% ../../nbs/Embeddings_CLI.ipynb 3
def _fetch_content(url: str) -> requests.models.Response:
    try:
        response = requests.get(url, timeout=50)
        response.raise_for_status()  # Raises an exception for HTTP errors
        return response
    except requests.exceptions.Timeout:
        raise requests.exceptions.Timeout(
            "Request timed out. Please check your internet connection or try again later."
        )
    except requests.exceptions.RequestException as e:
        raise requests.exceptions.RequestException(f"An error occurred: {e}")

# %% ../../nbs/Embeddings_CLI.ipynb 5
def _create_documents(extrated_path: Path, extension: str = "**/*.md") -> List[Document]:
    loader = DirectoryLoader(
        str(extrated_path), glob=extension, loader_cls=UnstructuredMarkdownLoader
    )
    return loader.load()

# %% ../../nbs/Embeddings_CLI.ipynb 9
def _save_embeddings_db(doc_chunks: List[Document], db_path: str) -> None:
    """Save the embeddings in a FAISS db
    
    Args:
        doc_chunks: A list of documents where each document represents a chunk.
        db_path: Path to save the FAISS db.
    """
    db = FAISS.from_documents(doc_chunks, OpenAIEmbeddings()) # type: ignore
    db.save_local(db_path)

# %% ../../nbs/Embeddings_CLI.ipynb 11
def _delete_directory(directory_path: Path) -> None:
    """Delete a directory and its contents if it exists.

    Args:
        directory_path: The path to the directory to be deleted.
    """
    if directory_path.exists():
        try:
            shutil.rmtree(directory_path)
        except Exception as e:
            print(f"Error deleting directory: {e}")

# %% ../../nbs/Embeddings_CLI.ipynb 13
def _generate_docs_db(input_path: Path, output_path: Path) -> None:
    with yaspin(
        text="Creating embeddings for the docs...", color="cyan", spinner="clock"
    ) as sp:
        docs = _create_documents(input_path)
        _save_embeddings_db(docs, output_path)
        
        sp.text = ""
        sp.ok(f" âœ” Docs embeddings created and saved to: {output_path}")

# %% ../../nbs/Embeddings_CLI.ipynb 15
def _generate_examples_db(input_path: Path, output_path: Path) -> None:
    pass

# %% ../../nbs/Embeddings_CLI.ipynb 17
app = typer.Typer(
    short_help="Download the zipped FastKafka documentation markdown files, generate embeddings, and save them in a vector database.",
)

# %% ../../nbs/Embeddings_CLI.ipynb 18
@contextmanager
def _download_and_extract_faststream_archive():
    with TemporaryDirectory() as d:
        try:
            typer.echo(f"Downloading docs and examples from FastStream repo and generating embeddings.")
            input_path = Path(f"{d}/archive.zip")
            extrated_path = Path(f"{d}/extrated_path")
            extrated_path.mkdir(parents=True, exist_ok=True)

            response = _fetch_content(FASTSTREAM_REPO_ZIP_URL)

            with open(input_path, "wb") as f:
                f.write(response.content)

            with zipfile.ZipFile(input_path, "r") as zip_ref:
                for member in zip_ref.namelist():
                    zip_ref.extract(member, extrated_path)

            yield extrated_path

        except Exception as e:
            fg = typer.colors.RED
            typer.secho(f"Unexpected internal error: {e}", err=True, fg=fg)
            raise typer.Exit(code=1)

# %% ../../nbs/Embeddings_CLI.ipynb 19
@app.command(
    "generate",
    help="Download the docs and examples from FastStream repo, generate embeddings, and save them in a vector database.",
)
def generate(
    db_path: str = typer.Option(
        get_root_data_path(), 
        "--db_path",
        "-p",
        help="The path to save the vector database."
    )
) -> None:
    with _download_and_extract_faststream_archive() as extracted_path:
        try:
            db_path = Path(db_path)
            _delete_directory(db_path)
            _generate_docs_db(extracted_path/FASTSTREAM_DOCS_DIR_SUFFIX, db_path/"docs")
            _generate_examples_db(extracted_path/FASTSTREAM_EXAMPLES_DIR_SUFFIX, db_path/"examples")

            typer.echo(f"\nSuccessfully generated all the embeddings and saved to: {db_path}")
        except Exception as e:
            fg = typer.colors.RED
            typer.secho(f"Unexpected internal error: {e}", err=True, fg=fg)
            raise typer.Exit(code=1)
