# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/Embeddings_CLI.ipynb.

# %% auto 0
__all__ = ['create_venv_and_generate_docs', 'app', 'generate']

# %% ../../nbs/Embeddings_CLI.ipynb 1
from typing import *
import shutil
import re
import os
from tempfile import TemporaryDirectory
from contextlib import contextmanager
from pathlib import Path
import subprocess  # nosec: B404: Consider possible security implications associated with the subprocess module.

from langchain.document_loaders import UnstructuredMarkdownLoader, DirectoryLoader, TextLoader
from langchain.schema.document import Document
from langchain.text_splitter import CharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.embeddings import OpenAIEmbeddings
from yaspin import yaspin
import typer


from faststream_gen._code_generator.constants import (
    FASTSTREAM_REPO_ZIP_URL,
    FASTSTREAM_DOCS_DIR_SUFFIX,
    FASTSTREAM_GEN_REPO_ZIP_URL,
    FASTSTREAM_GEN_EXAMPLES_DIR_SUFFIX,
    FASTSTREAM_EXAMPLE_FILES,
    FASTSTREAM_TMP_DIR_PREFIX,
    FASTSTREAM_DIR_TO_EXCLUDE,
    FASTSTREAM_ROOT_DIR_NAME,
    STAT_0o775
)
from .package_data import get_root_data_path
from .._code_generator.helper import download_and_extract_github_repo, write_file_contents, set_cwd

# %% ../../nbs/Embeddings_CLI.ipynb 3
def _create_documents(
    extrated_path: Path,
    extension: str = "**/*.md",
    dir_to_exclude: str = FASTSTREAM_DIR_TO_EXCLUDE,
) -> List[Document]:
    """Create a List of Document objects from files.

    Args:
        extracted_path (Path): The path to the directory containing the files to be
            loaded as documents.
        extension (str, optional): The file extension pattern to match. Defaults to
            "**/*.md" to match Markdown files in all subdirectories.
        dir_to_exclude (str, optional): Directory to exclude while creating the document object

    Returns:
        List[Document]: A list of documents created from the loaded files.
    """
    api_directory = extrated_path / dir_to_exclude
    if api_directory.exists() and api_directory.is_dir():
        shutil.rmtree(api_directory)

    loader_cls = TextLoader if extension == "*.txt" else UnstructuredMarkdownLoader
    loader = DirectoryLoader(str(extrated_path), glob=extension, loader_cls=loader_cls) # type: ignore
    docs = loader.load()

    typer.echo("\nBelow files are included in the embeddings:")
    typer.echo(
        "\n".join(
            [
                f'    - {d.metadata["source"].replace(f"{extrated_path}/", "")}'
                for d in docs
            ]
        )
    )
    return docs

# %% ../../nbs/Embeddings_CLI.ipynb 5
def _split_document_into_chunks(
    documents: List[Document],
    separator: str,
    chunk_size: int = 500,
    chunk_overlap: int = 0,
) -> List[Document]:
    """Split the list of documents into chunks

    Args:
        documents: List of documents to be split into chunks.
        separators: List of separator patterns used for chunking.
        chunk_size: The maximum size of each chunk in characters. Defaults to 1500.
        chunk_overlap: The overlap between consecutive chunks in characters. Defaults to 150.

    Returns:
        A list of documents where each document represents a chunk.
    """
    text_splitter = CharacterTextSplitter(
        chunk_size=chunk_size,
        chunk_overlap=chunk_overlap,
        separator=separator
    )
    chunks = text_splitter.split_documents(documents)
    return chunks

# %% ../../nbs/Embeddings_CLI.ipynb 7
def _save_embeddings_db(doc_chunks: List[Document], db_path: Path) -> None:
    """Save the embeddings in a FAISS db
    
    Args:
        doc_chunks: A list of documents where each document represents a chunk.
        db_path: Path to save the FAISS db.
    """
    db = FAISS.from_documents(doc_chunks, OpenAIEmbeddings())
    db.save_local(str(db_path))

# %% ../../nbs/Embeddings_CLI.ipynb 9
def _delete_directory(d: str) -> None:
    """Delete a directory and its contents if it exists.

    Args:
        directory_path: The path to the directory to be deleted.
    """
    d_path = Path(d)
    if d_path.exists():
        try:
            shutil.rmtree(d_path)
        except Exception as e:
            print(f"Error deleting directory: {e}")

# %% ../../nbs/Embeddings_CLI.ipynb 11
create_venv_and_generate_docs = """
#!/bin/bash

# get the project directory from command line argument
project_dir=$1

# create a new venv in the project directory
python3 -m venv $project_dir/my_venv > /dev/null 2>&1

# activate the venv
source $project_dir/my_venv/bin/activate

# navigate to the project directory
cd $project_dir

# install the python project inside the venv
pip install .['dev'] > /dev/null 2>&1

# Run the build-docs.sh script
docs_output=$(./scripts/build-docs.sh) 

# capture exit code
exit_code=$?

# print the output
echo "output_start:$docs_output:output_end"

# print the pytest exit code
echo "exit_code:$exit_code"

# deactivate the venv
deactivate
"""

# %% ../../nbs/Embeddings_CLI.ipynb 12
def _generate_faststream_docs(input_path: Path) -> None:
    bash_file = input_path / "generate_docs.sh"
    write_file_contents(str(bash_file), create_venv_and_generate_docs)
    
    with set_cwd(input_path.resolve()):
        # nosemgrep: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true
        p = subprocess.run( # nosec: B602, B603, B607 subprocess call - check for execution of untrusted input.
            ["bash", "generate_docs.sh", input_path.resolve()],
            capture_output=True,
            text=True,
        )

    # Extract exit code
    exit_code = int(re.search('exit_code:(\d+)', p.stdout).group(1)) # type: ignore
    if exit_code !=0:
        output: str = re.search('output_start:(.*):output_end', p.stdout, re.DOTALL).group(1).strip() # type: ignore
        raise ValueError(f"Error while running the documentation script. exit_code = {exit_code}, stdout = {output}")

# %% ../../nbs/Embeddings_CLI.ipynb 15
def _generate_docs_db(input_path: Path, output_path: Path) -> None:
    """Generate Document Embeddings Database.

    This function creates document embeddings for a collection of documents
    located in the specified input directory and saves the embeddings database
    to the specified output directory.

    Args:
        input_path (Path): The path to the directory containing the extracted files.
        output_path (Path): The path to the directory where the embeddings
            database will be saved.
    """
    with yaspin(
        text="Creating embeddings for the docs...", color="cyan", spinner="clock"
    ) as sp:
        _generate_faststream_docs(input_path / FASTSTREAM_ROOT_DIR_NAME)
        docs = _create_documents(input_path / FASTSTREAM_DOCS_DIR_SUFFIX) 
        _save_embeddings_db(docs, output_path)

        sp.text = ""
        sp.ok(f" âœ” Docs embeddings created and saved to: {output_path}")

# %% ../../nbs/Embeddings_CLI.ipynb 17
def _check_all_files_exist(d: Path, required_files: List[str]) -> bool:
    """Check if all required files exist in a directory.

    Args:
        d (Path): The path to the directory where the existence of files will
            be checked.
        required_files (List[str]): A list of filenames that should exist in
            the directory.

    Returns:
        True if all required files exist in the directory, False otherwise.
    """
    return all((d / file_name).exists() for file_name in required_files)

# %% ../../nbs/Embeddings_CLI.ipynb 20
def _append_file_contents(d: Path, parent_d: Path, required_files: List[str]) -> None:
    """Append contents of specified files to a result file.

    This function appends the contents of the specified list of files to a
    result file in a designated directory.

    Args:
        d (Path): The path to the directory containing the files to be appended.
        parent_d (Path): The parent directory where the result file will be created.
        required_files (List[str]): A list of filenames to be appended.
    """
    appended_examples_dir = parent_d / FASTSTREAM_TMP_DIR_PREFIX
    appended_examples_dir.mkdir(parents=True, exist_ok=True)

    result_file_name = appended_examples_dir / f"{d.name}.txt"

    with result_file_name.open("a") as result_file:
        for file_name in required_files:
            with (d / file_name).open("r") as file:
                result_file.write(
                    f"==== {file_name} starts ====\n{file.read()}\n==== {file_name} ends ====\n"
                )

# %% ../../nbs/Embeddings_CLI.ipynb 22
def _format_examples(input_path: Path, required_files: List[str]) -> None:
    """Format Examples by Appending File Contents.

    This function iterates through directories in the specified input path and checks
    if all the required files exist in each directory. If the required files are present,
    it appends their contents to a result file within the input path. If any of the
    required files are missing, it skips the directory and logs a message.

    Args:
        input_path (Path): The path to the directory containing example directories
            with files to be appended.
        required_files (List[str]): A list of filenames that must exist in each example
            directory.
    """
    for directory in input_path.iterdir():
        if directory.is_dir() and _check_all_files_exist(directory, required_files):
            _append_file_contents(directory, input_path, required_files)
        else:
            typer.echo(f"\nRequired files are missing. Skipping directory: {directory}")


def _generate_examples_db(
    input_path: Path,
    output_path: Path,
    required_files: List[str] = FASTSTREAM_EXAMPLE_FILES,
) -> None:
    """Generate Example Embeddings Database.

    This function creates embeddings for a collection of example documents located in
    the specified input directory and saves the embeddings database to the specified
    output directory. It appends the contents of specified files in each example
    directory, splits the concatenated document into chunks based on specified
    separators, and saves the embeddings for each chunk in the output database.

    Args:
        input_path (Path): The path to the directory containing example documents.
        output_path (Path): The path to the directory where the embeddings database
            will be saved.
        required_files (List[str]): A list of filenames that must exist in each
            example directory. Defaults to FASTSTREAM_EXAMPLE_FILES.
    """
    with yaspin(
        text="Creating embeddings for the examples...", color="cyan", spinner="clock"
    ) as sp:
        
        _format_examples(input_path, required_files)
        docs = _create_documents(
            input_path / FASTSTREAM_TMP_DIR_PREFIX, extension="*.txt"
        )
#         doc_chunks = _split_document_into_chunks(
#             docs, separator="==== description.txt ends ===="
#         )
        _save_embeddings_db(docs, output_path)

        sp.text = ""
        sp.ok(f" âœ” Examples embeddings created and saved to: {output_path}")

# %% ../../nbs/Embeddings_CLI.ipynb 24
app = typer.Typer(
    short_help="Download the zipped FastKafka documentation markdown files, generate embeddings, and save them in a vector database.",
)

# %% ../../nbs/Embeddings_CLI.ipynb 25
@app.command(
    "generate",
    help="Download the docs and examples from FastStream repo, generate embeddings, and save them in a vector database.",
)
def generate(
    db_path: str = typer.Option(
        get_root_data_path(),
        "--db_path",
        "-p",
        help="The path to save the vector database.",
    )
) -> None:
    typer.echo(
        f"Downloading documentation and examples for semantic search."
    )
    try:
        _delete_directory(db_path)

        with download_and_extract_github_repo(
            FASTSTREAM_REPO_ZIP_URL
        ) as extracted_path:
            for p in (
                Path(extracted_path) / FASTSTREAM_ROOT_DIR_NAME / "scripts"
            ).glob("*.sh"):
                p.chmod(STAT_0o775)
            _generate_docs_db(
                extracted_path, Path(db_path) / "docs"
            )

        with download_and_extract_github_repo(
            FASTSTREAM_GEN_REPO_ZIP_URL
        ) as extracted_path:
            _generate_examples_db(
                extracted_path / FASTSTREAM_GEN_EXAMPLES_DIR_SUFFIX,
                Path(db_path) / "examples",
            )

        typer.echo(
            f"\nSuccessfully generated all the embeddings and saved to: {db_path}"
        )
    except Exception as e:
        fg = typer.colors.RED
        typer.secho(f"Unexpected internal error: {e}", err=True, fg=fg)
        raise typer.Exit(code=1)
