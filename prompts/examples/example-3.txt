==== EXAMPLE APP DESCRIPTION ====

Develop a new FastKafka application that consumes JSON-encoded objects from the "receive_order" topic. These objects include attributes like "name" and "quantity." Upon consumption, enhance the message by adding a "location" attribute set to "Zagreb." Subsequently, forward the modified message to the "place_order" topic. After this, send another message to the "update_inventory" topic. This message should include a "quantity" attribute that corresponds to the received quantity value. No authentication is required.

==== EXAMPLE SKELETON CODE ====

from typing import *
from pydantic import BaseModel, Field
from fastkafka import FastKafka


class Order(BaseModel):
    name: str = Field(..., description="Name of the order.")
    quantity: int = Field(..., description="Quantity of the order.")
    location: str = Field("Zagreb", description="Location of the order.")

class InventoryUpdate(BaseModel):
    quantity: int = Field(..., description="Quantity of the order to update inventory.")

kafka_brokers = {
    "localhost": {
        "url": "localhost",
        "description": "local development Kafka broker",
        "port": 9092,
    },
    "staging": {
        "url": "staging.airt.ai",
        "description": "staging Kafka broker",
        "port": 9092,
    },
    "production": {
        "url": "prod.airt.ai",
        "description": "production Kafka broker",
        "port": 9092,
    }
}

app_description = "A FastKafka application that consumes JSON-encoded objects from the 'receive_order' topic. Each object includes attributes such as 'name' and 'quantity'. Upon consumption, the application enhances the message by adding a 'location' attribute set to 'Zagreb'. The modified message is then forwarded to the 'place_order' topic. Additionally, a message is sent to the 'update_inventory' topic, including a 'quantity' attribute corresponding to the received quantity value. No authentication is required."
app = FastKafka(
    kafka_brokers=kafka_brokers, 
    description=app_description, 
    title='Enhance and Forward Order',
)


receive_order_description = "Upon consumption, enhance the message by adding a 'location' attribute set to 'Zagreb'. Subsequently, forward the modified message to the 'place_order' topic. Also, send another message to the 'update_inventory' topic, including a 'quantity' attribute that corresponds to the received quantity value."
@app.consumes(topic="receive_order", description=receive_order_description)
async def on_receive_order(msg: Order):
    raise NotImplementedError()


place_order_description = "Produce the modified messages to the 'place_order' topic."
@app.produces(topic="place_order", description=place_order_description)
async def to_place_order(msg: Order) -> Order:
    raise NotImplementedError()


update_inventory_description = "Produce messages with 'quantity' attribute corresponding to the received quantity value to the 'update_inventory' topic."
@app.produces(topic="update_inventory", description=update_inventory_description)
async def to_update_inventory(quantity: int) -> InventoryUpdate:
    raise NotImplementedError()

==== EXAMPLE APPLICATION CODE ====

from typing import *
from pydantic import BaseModel, Field
from fastkafka import FastKafka


class Order(BaseModel):
    name: str = Field(..., description="Name of the order.")
    quantity: int = Field(..., description="Quantity of the order.")
    location: str = Field("Zagreb", description="Location of the order.")

class InventoryUpdate(BaseModel):
    quantity: int = Field(..., description="Quantity of the order to update inventory.")

kafka_brokers = {
    "localhost": {
        "url": "localhost",
        "description": "local development Kafka broker",
        "port": 9092,
    },
    "staging": {
        "url": "staging.airt.ai",
        "description": "staging Kafka broker",
        "port": 9092,
    },
    "production": {
        "url": "prod.airt.ai",
        "description": "production Kafka broker",
        "port": 9092,
    }
}

app_description = "A FastKafka application that consumes JSON-encoded objects from the 'receive_order' topic. Each object includes attributes such as 'name' and 'quantity'. Upon consumption, the application enhances the message by adding a 'location' attribute set to 'Zagreb'. The modified message is then forwarded to the 'place_order' topic. Additionally, a message is sent to the 'update_inventory' topic, including a 'quantity' attribute corresponding to the received quantity value. No authentication is required."
app = FastKafka(
    kafka_brokers=kafka_brokers, 
    description=app_description, 
    title='Enhance and Forward Order',
)


receive_order_description = "Upon consumption, enhance the message by adding a 'location' attribute set to 'Zagreb'. Subsequently, forward the modified message to the 'place_order' topic. Also, send another message to the 'update_inventory' topic, including a 'quantity' attribute that corresponds to the received quantity value."
@app.consumes(topic="receive_order", description=receive_order_description)
async def on_receive_order(msg: Order):
    msg.location = "Zagreb"
    await to_place_order(msg)
    await to_update_inventory(msg.quantity)


place_order_description = "Produce the modified messages to the 'place_order' topic."
@app.produces(topic="place_order", description=place_order_description)
async def to_place_order(msg: Order) -> Order:
    return msg


update_inventory_description = "Produce messages with 'quantity' attribute corresponding to the received quantity value to the 'update_inventory' topic."
@app.produces(topic="update_inventory", description=update_inventory_description)
async def to_update_inventory(quantity: int) -> InventoryUpdate:
    return InventoryUpdate(quantity=quantity)

==== EXAMPLE TEST CODE ====

import asyncio
from fastkafka.testing import Tester


try:
    from .application import *
except ImportError:
    from application import *


async def async_tests():
    async with Tester(app) as tester:
        # Create a sample order message
        input_msg = Order(name="Test Order", quantity=10)

        # Publish the order message to the receive_order topic
        await tester.to_receive_order(input_msg)

        # Assert that the on_receive_order function was called with the correct argument
        await app.awaited_mocks.on_receive_order.assert_called_with(
            input_msg, timeout=5
        )

        # Assert that the to_place_order function in the tester was called with the correct argument
        await tester.awaited_mocks.on_place_order.assert_called_with(
            Order(name="Test Order", quantity=10, location="Zagreb"), timeout=5
        )

        # Assert that the to_update_inventory function in the tester was called with the correct argument
        await tester.awaited_mocks.on_update_inventory.assert_called_with(
            InventoryUpdate(quantity=10), timeout=5
        )

    print("ok")


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(async_tests())