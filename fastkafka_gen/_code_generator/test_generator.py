# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/Test_Generator.ipynb.

# %% auto 0
__all__ = ['logger', 'SAMPLE_CODE', 'generate_test']

# %% ../../nbs/Test_Generator.ipynb 1
from typing import *
import time

from yaspin import yaspin
from fastkafka._components.logger import get_logger

# %% ../../nbs/Test_Generator.ipynb 3
logger = get_logger(__name__)

# %% ../../nbs/Test_Generator.ipynb 5
SAMPLE_CODE = """
import asyncio
from fastkafka.testing import Tester
from application import *

async def async_tests():
    async with Tester(kafka_app).using_inmemory_broker() as tester:
        input_msg = StoreProduct(
            product_name="Mobile Phone",
            currency="HRK",
            price=750.0
        )

        # tester produces message to the store_product topic
        await tester.to_store_product(input_msg)

        # assert that app consumed from the store_product topic and it was called with the accurate argument
        await kafka_app.awaited_mocks.on_store_product.assert_called_with(
            input_msg, timeout=5
        )
        # assert that tester consumed from the change_currency topic and it was called with the accurate argument
        await tester.awaited_mocks.on_change_currency.assert_called_with(
            StoreProduct(
                product_name="Mobile Phone",
                currency="EUR",
                price=100.0
            ), timeout=5
        )
    print("ok")


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(async_tests())
"""

# %% ../../nbs/Test_Generator.ipynb 6
def generate_test(app_code: str) -> str:
    """Generate test for the new FastKafka app
    
    Args:
        app_code: The generated application code
        
    Returns:
        The generated test code for the application
    """
    # TODO: Implement the actual functionality
    with yaspin(text="Generating tests...", color="cyan", spinner="clock") as sp:

        time.sleep(3)
        sp.text = ""
        sp.ok(" âœ” Tests are generated and saved at: /some_dir/test.py")
        return SAMPLE_CODE
