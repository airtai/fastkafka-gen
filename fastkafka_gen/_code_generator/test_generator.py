# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/Test_Generator.ipynb.

# %% auto 0
__all__ = ['logger', 'generate_test']

# %% ../../nbs/Test_Generator.ipynb 1
from typing import *
import time
import importlib.util
from tempfile import TemporaryDirectory
from pathlib import Path

from yaspin import yaspin

from .._components.logger import get_logger
from fastkafka_gen._code_generator.helper import (
    CustomAIChat,
    ValidateAndFixResponse,
    write_file_contents,
    read_file_contents,
    validate_python_code,
    add_dir_to_sys_path,
)
from .prompts import TEST_GENERATION_PROMPT
from fastkafka_gen._code_generator.constants import (
    APPLICATION_FILE_NAME,
    INTEGRATION_TEST_FILE_NAME,
)

# %% ../../nbs/Test_Generator.ipynb 3
logger = get_logger(__name__)

# %% ../../nbs/Test_Generator.ipynb 7
def _validate_response(test_code: str, app_code: str) -> List[str]:
    with TemporaryDirectory() as d:
        try:
            temp_dir = Path(d)

            # Create a package structure
            package_dir = temp_dir / "my_temp_package"
            package_dir.mkdir()
            (package_dir / "__init__.py").touch()

            temp_file = package_dir / INTEGRATION_TEST_FILE_NAME
            write_file_contents(str(package_dir / APPLICATION_FILE_NAME), app_code)
            write_file_contents(str(temp_file), test_code)

            with add_dir_to_sys_path(d):
                # Import the module using importlib
                spec = importlib.util.spec_from_file_location("my_temp_package.test", temp_file)
                module = importlib.util.module_from_spec(spec)  # type: ignore
                spec.loader.exec_module(module)  # type: ignore

        except Exception as e:
            return [f"{type(e).__name__}: {e}"]

        return []

# %% ../../nbs/Test_Generator.ipynb 9
def generate_test(description: str, code_gen_directory: str, total_usage: List[Dict[str, int]]) -> List[Dict[str, int]]:
    """Generate integration test for the FastKafka app

    Args:
        description: Validated User application description
        code_gen_directory: The directory containing the generated files.

    Returns:
        The generated integration test code for the application
    """
    with yaspin(text="Generating tests...", color="cyan", spinner="clock") as sp:
        app_file_name = f"{code_gen_directory}/{APPLICATION_FILE_NAME}"
        app_code = read_file_contents(app_file_name)
        
        prompt = TEST_GENERATION_PROMPT.replace("==== REPLACE WITH APP DESCRIPTION ====", description)
        test_generator = CustomAIChat(user_prompt=prompt)
        test_validator = ValidateAndFixResponse(test_generator, _validate_response)
        validated_test, total_usage = test_validator.fix(app_code, total_usage=total_usage, use_prompt_in_validation=True)

        output_file = f"{code_gen_directory}/{INTEGRATION_TEST_FILE_NAME}"
        write_file_contents(output_file, validated_test)

        sp.text = ""
        sp.ok(f" âœ” Tests are generated and saved at: {output_file}")
        return total_usage
