# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/AsyncAPI_Spec_Generator.ipynb.

# %% auto 0
__all__ = ['logger', 'generate_asyncapi_spec']

# %% ../../nbs/AsyncAPI_Spec_Generator.ipynb 1
from typing import *
import time
import yaml
import platform
import subprocess  # nosec: B404: Consider possible security implications associated with the subprocess module.
from pathlib import Path
from tempfile import TemporaryDirectory

from yaspin import yaspin

from fastkafka._components.docs_dependencies import _check_npm_with_local, npm_required_major_version

from .._components.logger import get_logger
from .helper import CustomAIChat, ValidateAndFixResponse
from .prompts import ASYNCAPI_SPEC_GENERATION_PROMPT

# %% ../../nbs/AsyncAPI_Spec_Generator.ipynb 3
logger = get_logger(__name__)

# %% ../../nbs/AsyncAPI_Spec_Generator.ipynb 5
def _extract_errors(output: str, spec_dir: str) -> List[str]:
    """Extract error messages from the AsyncAPI CLI validation output.

    Args:
        output: The output of the AsyncAPI CLI validation command.
        base_directory (str): The base directory name of the generated AsyncAPI spec file.

    Returns:
        A list of error messages generated by AsyncAPI CLI validation command.
    """
    output_lines = output.split("\n")
    errors = [
        line.replace(f"{spec_dir}/", "") for line in output_lines if " error " in line
    ]
    return errors

# %% ../../nbs/AsyncAPI_Spec_Generator.ipynb 9
def _validate_response(response: str) -> List[str]:
    """Validate the AsyncAPI spec generated by OpenAI

    Args:
        response: The AsyncAPI spec generated by OpenAI in string format.

    Returns:
        Returns a list of errors if any found during the validation of the spec.

    Raises:
        json.JSONDecodeError: If the response is not a valid JSON.
    """
    incomplete_app_description = "==== INCOMPLETE APP DESCRIPTION ===="
    
    if incomplete_app_description in response.upper():
        raise ValueError(response)
    
    # check if nmp is installed
    try:
        _check_npm_with_local()
    except RuntimeError as e:
        raise RuntimeError(
            f"Error: npm not found. To use the code generation feature, you must have npm >= {npm_required_major_version} installed.\nPlease run the following command to install the required dependencies:\n\nfastkafka docs install_deps"
        )

    with TemporaryDirectory() as d:
        spec_path = Path(d) / "asyncapi.yml"
        with open(spec_path, "w", encoding="utf-8") as f:
            f.write(response)

        cmd = [
            "npx",
            "-y",
            "-p",
            "@asyncapi/cli",
            "asyncapi",
            "validate",
            f"{spec_path}",
            "--diagnostics-format",
            "text",
        ]
        # nosemgrep: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true
        p = subprocess.run(  # nosec: B602, B603 subprocess call - check for execution of untrusted input.
            cmd,
            stderr=subprocess.STDOUT,
            stdout=subprocess.PIPE,
            shell=True if platform.system() == "Windows" else False,
        )
        if p.returncode == 0:
            errors = _extract_errors(p.stdout.decode(), str(d))
            return errors
        else:
            logger.info(f"Validation of AsyncAPI spec failed!")
            logger.info(f"Output of '$ {' '.join(cmd)}'{p.stdout.decode()}")
            raise ValueError(
                f"Validation of AsyncAPI spec failed, '$ {' '.join(cmd)}'{p.stdout.decode()}.\n\nPlease try again."
            )

# %% ../../nbs/AsyncAPI_Spec_Generator.ipynb 14
def _save_async_api_spec(contents: str, output_path: str) -> str:
    """Save the YAML-formatted asyncapi spec in the specified output path.

    Args:
        contents: A YAML-formatted asyncapi spec.
        output_file: The path to save the asyncapi spec.
    """
    Path(output_path).mkdir(parents=True, exist_ok=True)
    
    output_file = f"{output_path}/asyncapi.yml"
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(contents)
    
    return output_file

# %% ../../nbs/AsyncAPI_Spec_Generator.ipynb 16
def generate_asyncapi_spec(description: str, output_path: str) -> str:
    """Generate a AsyncAPI spec from the user's application description

    Args:
        description: Validated User application description
        output_path: The path to the output file where the generated AsyncAPI spec will be saved.

    Returns:
        The total token used to generate the AsyncAPI spec
    """
    with yaspin(
        text="Generating AsyncAPI specification (usually takes around 15 to 30 seconds)...",
        color="cyan",
        spinner="clock",
    ) as sp:
        logger.info("\nGenerating AsyncAPI specification")
        async_spec_generator = CustomAIChat(user_prompt=ASYNCAPI_SPEC_GENERATION_PROMPT)
        async_spec_validator = ValidateAndFixResponse(async_spec_generator, _validate_response)
        validated_async_spec, total_tokens = async_spec_validator.fix(description)
        
        output_file = _save_async_api_spec(validated_async_spec, output_path)

        sp.text = ""
        sp.ok(f" âœ” AsyncAPI specification generated and saved to: {output_file}")
        return total_tokens
